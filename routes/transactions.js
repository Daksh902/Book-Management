const express = require('express');
const Transaction = require('../models/transaction');
const User = require('../models/user');
const Book = require('../models/book');
const router = express.Router();


// Issue a book
router.post('/transactions/issue', async (req, res) => {
    const { userId, bookId, issueDate } = req.body;
    try {
        // Validate user and book existence
        const user = await User.findById(userId);
        const book = await Book.findById(bookId);
        if (!user || !book) return res.status(404).json({ message: 'User or book not found' });

        // Create a new transaction
        const newTransaction = new Transaction({ userId, bookId, issueDate });
        await newTransaction.save();
        res.status(201).json(newTransaction);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Error issuing book' });
    }
});

// Return a book
router.post('/transactions/return', async (req, res) => {
    const { userId, bookId, returnDate } = req.body;
    try {
        const transaction = await Transaction.findOne({ userId, bookId, returnDate: null });
        if (!transaction) return res.status(404).json({ message: 'Transaction not found' });

        transaction.returnDate = returnDate;
        // Calculate rent
        const rentPerDay = await Book.findById(bookId).select('rentPerDay');
        const issueDate = transaction.issueDate;
        const rentDays = Math.ceil((new Date(returnDate) - new Date(issueDate)) / (1000 * 60 * 60 * 24));
        transaction.totalRent = rentDays * rentPerDay.rentPerDay;

        await transaction.save();
        res.status(200).json(transaction);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Error returning book' });
    }
});

// Query 1: Get people who issued a book and its current status
router.get('/transactions/book-status', async (req, res) => {
    const { bookName } = req.query;
    try {
        const book = await Book.findOne({ name: bookName });
        if (!book) return res.status(404).json({ message: "Book not found" });

        const allTransactions = await Transaction.find({ bookId: book._id }).populate('userId', 'name');
        const currentlyIssued = await Transaction.findOne({ bookId: book._id, returnDate: null }).populate('userId', 'name');

        res.status(200).json({
            totalIssuedCount: allTransactions.length,
            currentlyIssuedTo: currentlyIssued ? currentlyIssued.userId.name : "Not issued at the moment"
        });
    } catch (error) {
        res.status(500).json({ message: "Error fetching transactions" });
    }
});

// Query 2: Total rent generated by a book
router.get('/transactions/book-rent', async (req, res) => {
    const { bookName } = req.query;
    try {
        const book = await Book.findOne({ name: bookName });
        if (!book) return res.status(404).json({ message: "Book not found" });

        const transactions = await Transaction.find({ bookId: book._id, returnDate: { $ne: null } });
        const totalRent = transactions.reduce((acc, transaction) => acc + transaction.totalRent, 0);

        res.status(200).json({ totalRent });
    } catch (error) {
        res.status(500).json({ message: "Error calculating rent" });
    }
});

// Query 3: List of books issued to a person (by name or userId)
router.get('/transactions/person-books', async (req, res) => {
    const { personName, userId } = req.query;
    try {
        let user = userId ? await User.findById(userId) : await User.findOne({ name: personName });
        if (!user) return res.status(404).json({ message: "User not found" });

        const transactions = await Transaction.find({ userId: user._id }).populate('bookId', 'name');
        const issuedBooks = transactions.map(transaction => transaction.bookId.name);

        res.status(200).json({ issuedBooks });
    } catch (error) {
        res.status(500).json({ message: "Error fetching user's books" });
    }
});

// Query 4: List of books issued within a date range
router.get('/transactions/date-range', async (req, res) => {
    const { startDate, endDate } = req.query;
    try {
        const transactions = await Transaction.find({
            issueDate: { $gte: new Date(startDate), $lte: new Date(endDate) }
        }).populate('bookId', 'name').populate('userId', 'name');

        const result = transactions.map(transaction => ({
            bookName: transaction.bookId.name,
            issuedTo: transaction.userId.name
        }));

        res.status(200).json(result);
    } catch (error) {
        res.status(500).json({ message: "Error fetching transactions" });
    }
});

module.exports = router;
